from glob import glob
import os
import fnmatch

prefix = ARGUMENTS.get('prefix', '')
cc = prefix + 'gcc'
cxx = prefix + 'g++'
ar = prefix + 'ar'
ranlib = prefix + 'ranlib'

project_name = 'ledmatrix'
build_dir = 'build/'

src_dir = 'src/'
include_dir = 'include/'
src_ext = '.cpp'

static_lib_dir = 'lib/'
lib_dir = 'libraries/'

# host name of device or ip.
remote_device = 'pi@minimatrix'

""" system installed libs that are needed."""
# rgbmatrix uses pthread, rt, m
system_libs = ['pthread', 'rt', 'm']

"""
    local libs are libraries inside of the project libraries folder.
    asuming the library folder has the same name as the library
    (lib + foldername).
"""
local_libs = ['rgbmatrix', 'lmcp']

"""
    compile time flags. don't add libraries here.
    but in system_libs or local_libs
"""
ccflags = ['-Wall']
# for debugging symbols.
ccflags.append('-ggdb3')
ccflags.append('-O0')
ccflags.append('-ansi')
ccflags.append('-pedantic-errors')
ccflags.append('-Wextra')
ccflags.append('-Werror')
ccflags.append('--std=c++11')


""" setup build environment """
env = Environment()

env['CXX'] = cxx
env['CC'] = cc
env['AR'] = ar
env['RANLIB'] = ranlib
env['CCFLAGS'] = ccflags
env['ENV']['PATH'] = os.environ['PATH']
env.Append(CPPPATH=[include_dir])

build_all = ARGUMENTS.get('all', 0)

""" finds lib includes and the library and ands the lib to be found. """
if len(local_libs):
    for lib in local_libs:
        lib_root = lib_dir + lib
        lib_include = lib_root + '/' + 'include'
        lib_libdir = lib_root + '/' + 'lib/'

        """ call scons scripts with prefix=thisprefix """
        if build_all:
            if "Sconstruct" in os.listdir(lib_root):
                SConscript(lib_root + "/Sconstruct")
            elif "makefile" in [f.lower() for f in os.listdir(libroot)]:
                os.system(lib_root + "makefile")

        env.Append(CPPPATH=[lib_include])
        env.Append(LIBPATH=[lib_libdir])
        env.Append(LIBS=[lib])

""" does the same but then for system wide installed libraries. """
if len(system_libs):
    # run for system installed libs
    for lib in system_libs:
        env.Append(LIBS=[lib])
    print("[%s] libs: %s" % (project_name, env['LIBS']))

""" makes a list of all the sources and turns them into a list of objects. """
obj_targets = []
src_files = []
for root, dirnames, filenames in os.walk(src_dir):
    for filename in fnmatch.filter(filenames, '*.cpp'):
        src_files.append(os.path.join(root, filename))

for src in src_files:
    target = src.replace('.cpp', '.o').replace(src_dir, 'objects/')
    obj_targets.append(build_dir + target)

objects = []
for (obj_target, src_file) in zip(obj_targets, src_files):
    objects.append(env.Object(target=obj_target, source=src_file))

""" compile and link everything. """
env.Program(target=build_dir + project_name, source=objects)

""" copy to the device and run if upload=1"""
upload = ARGUMENTS.get('upload', 0)
if upload:
    # copy with scp and run with ssh.
    commands = ['scp -r $SOURCE $TARGET:/tmp/', ('ssh $TARGET -t sudo /tmp/$SOURCE/%s' % project_name)]
    env.Command(remote_device, build_dir, commands)

""" also remove build directory when cleaning. """
Clean('.', build_dir)

if 'CPPPATH' in env:
    print("[%s] cpppath: %s" % (project_name, env['CPPPATH']))
if 'LIBPATH' in env:
    print("[%s] libpath: %s" % (project_name, env['LIBPATH']))
